name: Build Backend, Deploy Terraform, Seed DB, Build Frontend

on:
  push:

permissions:
  id-token: write
  contents: read
  
jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env:
      DB_USER: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      AWS_REGION: us-east-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # ---------- Backend Lambda Layer Build ----------
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - name: Create terraform/build directory
        run: mkdir -p terraform/build

      - name: Package Lambda Layer (Python Dependencies)
        working-directory: backend
        run: |
          mkdir -p python
          pip install -r requirements.txt -t python
          cd python
          zip -r ../python-deps-layer.zip .

      - name: Move Lambda Layer Zip
        run: mv backend/python-deps-layer.zip terraform/build/python-deps-layer.zip

      - name: Package Lambda Function Code
        working-directory: backend
        run: |
          zip -r function-code.zip server.py
          ls -lh function-code.zip

      - name: Move Lambda Code Zip
        run: mv backend/function-code.zip terraform/build/function-code.zip

      - name: Commit Updated Lambda Artifacts to Repo (with [skip ci])
        run: |
          if git diff --quiet terraform/build/; then
            echo "No changes to Lambda artifacts. Skipping commit."
          else
            git config user.name "github-actions"
            git config user.email "actions@github.com"
            git add terraform/build/*
            git commit -m "Update Lambda artifacts [skip ci]"
            git push
          fi

      # ---------- Terraform Backend & Resource Checks ----------
      - name: Check Terraform Backend & AWS Resources
        run: |
          set -e

          echo "🔍 Checking Terraform backend..."
          BUCKET_NAME="raresonal-stockwishlist-terraform-state-bucket"
          TABLE_NAME="raresonal-stockwishlist-terraform-lock-table"

          aws s3api head-bucket --bucket "$BUCKET_NAME" && echo "✅ S3 bucket exists." || { echo "❌ Missing S3 bucket."; exit 1; }
          aws dynamodb describe-table --table-name "$TABLE_NAME" && echo "✅ DynamoDB table exists." || { echo "❌ Missing DynamoDB table."; exit 1; }

          echo "🔍 Checking RDS instance..."
          aws rds describe-db-instances --db-instance-identifier stockwishlist-db && echo "✅ RDS exists." || echo "ℹ️ RDS will be created."

          echo "🔍 Checking Lambda layer..."
          aws lambda list-layer-versions --layer-name python-deps-layer | grep Version && echo "✅ Lambda layer exists." || echo "ℹ️ Lambda layer will be created."

          echo "🔍 Checking IAM role..."
          aws iam get-role --role-name stockwishlist-lambda-role && echo "✅ IAM role exists." || echo "ℹ️ IAM role will be created."

          echo "🔍 Checking Amplify app..."
          aws amplify list-apps --query "apps[?name=='stockwishlist-amplify-app']" --output text | grep stockwishlist-amplify-app && echo "✅ Amplify app exists." || echo "ℹ️ Amplify app will be created."

          echo "🔍 Checking Cognito user pool..."
          aws cognito-idp list-user-pools --max-results 60 --query "UserPools[?Name=='stockwishlist-user-pool']" --output text | grep stockwishlist-user-pool && echo "✅ Cognito pool exists." || echo "ℹ️ Cognito user pool will be created."

          echo "🔍 Checking API Gateway..."
          aws apigateway get-rest-apis --query "items[?name=='stockwishlist-api']" --output text | grep stockwishlist-api && echo "✅ API Gateway exists." || echo "ℹ️ API Gateway will be created."

      # ---------- Terraform ----------
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan and Save Output
        id: tf_plan
        working-directory: terraform
        run: |
          terraform plan -out=tfplan \
            -var="use_public_subnet_for_rds=true" \
            -var="public_subnet_ids=${{ secrets.PUBLIC_SUBNET_IDS }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="vpc_id=${{ secrets.VPC_ID }}" \
            -var="private_subnet_ids=${{ secrets.PRIVATE_SUBNET_IDS }}" \
            -var="github_oauth_token=${{ secrets.GITHUB_OAUTH_TOKEN }}"

          terraform show -no-color tfplan > plan.txt
          if grep -q "No changes." plan.txt; then
            echo "NO_CHANGES=true" >> $GITHUB_ENV
          else
            echo "NO_CHANGES=false" >> $GITHUB_ENV
          fi

      - name: Terraform Apply (If Changes)
        if: env.NO_CHANGES == 'false'
        working-directory: terraform
        run: terraform apply -auto-approve tfplan

      - name: Skip Terraform Apply (No Changes)
        if: env.NO_CHANGES == 'true'
        run: echo "✅ Skipping apply — no changes detected."

      # ---------- Database Seeding (Idempotent) ----------
      - name: Get RDS Host from Terraform Output
        id: rds
        working-directory: terraform
        run: echo "RDS_HOST=$(terraform output -raw rds_endpoint)" >> $GITHUB_ENV

      - name: Seed PostgreSQL Database (Idempotent)
        if: success()
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          curl -L -o wishlist.sql https://raw.githubusercontent.com/RareSonal/StockWishlist/main/database/wishlist.sql

          export PGPASSWORD="${DB_PASSWORD}"
          TABLE_EXISTS=$(psql -h "${RDS_HOST}" -U "$DB_USER" -d stockwishlist -tAc "SELECT to_regclass('public.wishlist');")

          if [ "$TABLE_EXISTS" = "wishlist" ]; then
            echo "✅ Wishlist table already exists. Skipping seed."
          else
            echo "🌱 Seeding database..."
            psql -h "${RDS_HOST}" -U "$DB_USER" -d stockwishlist -f wishlist.sql
          fi

      # ---------- Lock Down RDS ----------
      - name: Terraform Apply (Lock Down RDS to Private)
        working-directory: terraform
        run: |
          terraform apply -auto-approve \
            -var="use_public_subnet_for_rds=false" \
            -var="public_subnet_ids=${{ secrets.PUBLIC_SUBNET_IDS }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="vpc_id=${{ secrets.VPC_ID }}" \
            -var="private_subnet_ids=${{ secrets.PRIVATE_SUBNET_IDS }}" \
            -var="github_oauth_token=${{ secrets.GITHUB_OAUTH_TOKEN }}"

      # ---------- Frontend ----------
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      - name: Create .env.production from GitHub Secrets
        working-directory: frontend
        run: |
          echo "VUE_APP_REGION=${{ secrets.COGNITO_REGION }}" > .env.production
          echo "VUE_APP_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}" >> .env.production
          echo "VUE_APP_CLIENT_ID=${{ secrets.COGNITO_APP_CLIENT_ID }}" >> .env.production

      - name: Build Frontend App
        working-directory: frontend
        run: npm run build
