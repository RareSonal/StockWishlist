name: Build Backend, Deploy Terraform, Seed DB, Build Frontend

on:
  push:

permissions:
  id-token: write
  contents: read

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env:
      DB_USER: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: 🧾 Checkout Code
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: 🔐 Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - name: 📁 Ensure Lambda Build Directory Exists
        run: mkdir -p modules/lambda/build

      - name: 📦 Package Python Dependencies as Lambda Layer
        working-directory: backend
        run: |
          rm -rf python python-deps-layer.zip
          mkdir -p python
          pip install -r requirements.txt -t python
          cd python
          zip -r ../python-deps-layer.zip .
          cd ..
          mkdir -p ../terraform/modules/lambda/build
          mv python-deps-layer.zip ../terraform/modules/lambda/build/

      - name: ✅ Verify Lambda Layer ZIP exists
        run: |
          if [ ! -f terraform/modules/lambda/build/python-deps-layer.zip ]; then
            echo "❌ Lambda layer zip not found!"
            exit 1
          else
            echo "✅ Lambda layer zip exists."
          fi

      - name: 📦 Package Flask Backend Lambda
        run: |
          mkdir -p backend/lambda_package
          pip install -r backend/requirements.txt -t backend/lambda_package/
          cd backend/lambda_package
          zip -r ../../modules/lambda/build/function-code.zip .
          cd ../..

      - name: 📦 Package User Migration Lambda
        run: |
          zip -r modules/lambda/build/user-migration.zip backend/user_migration

      - name: ⚙️ Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: ⚙️ Terraform Init
        working-directory: terraform
        run: terraform init

      - name: 🔧 Generate terraform.tfvars from GitHub Secrets
        working-directory: terraform
        run: |
          cat <<EOF > terraform.tfvars
          use_public_subnet_for_rds = true
          public_subnet_ids = ${PUBLIC_SUBNET_IDS}
          db_username = "${DB_USER}"
          db_password = "${DB_PASSWORD}"
          vpc_id = "${{ secrets.VPC_ID }}"
          github_oauth_token = "${{ secrets.GHUB_OAUTH_TOKEN }}"
          EOF
        env:
          PUBLIC_SUBNET_IDS: ${{ secrets.PUBLIC_SUBNET_IDS }}

      - name: 📋 Terraform Plan and Save Output
        id: tf_plan
        working-directory: terraform
        run: |
          terraform plan -out=tfplan
          terraform show -no-color tfplan > plan.txt
          if grep -q "No changes." plan.txt; then
            echo "NO_CHANGES=true" >> $GITHUB_ENV
          else
            echo "NO_CHANGES=false" >> $GITHUB_ENV
          fi

      - name: 🚀 Terraform Apply (If Changes)
        if: env.NO_CHANGES == 'false'
        working-directory: terraform
        run: terraform apply -auto-approve tfplan

      - name: ⏭️ Skip Terraform Apply (No Changes)
        if: env.NO_CHANGES == 'true'
        run: echo "✅ Skipping apply — no changes detected."

      - name: 🧪 Verify Terraform Binary (Debug)
        run: |
          which terraform
          terraform -version

      - name: 🌱 Seed PostgreSQL Database (Wait up to 10 mins)
        if: env.NO_CHANGES == 'false'
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_USER: ${{ secrets.DB_USERNAME }}
        working-directory: terraform
        run: |
          set -euo pipefail

          echo "🔎 Fetching RDS endpoint from Terraform output..."
          RDS_HOST=$(terraform output -raw rds_endpoint)
          echo Fetched RDS endpoint $RDS_HOST

          echo DB_USER $DB_USER
          echo RDS_HOST $RDS_HOST

          echo "📦 Installing PostgreSQL client..."
          sudo apt-get update && sudo apt-get install -y postgresql-client

          echo "🌐 Downloading wishlist.sql seed file..."
          curl -L -o wishlist.sql https://raw.githubusercontent.com/RareSonal/StockWishlist/main/database/wishlist.sql

          echo "⏳ Waiting for DB to become available (max 10 minutes)..."
          for i in {1..30}; do
            if psql -h $RDS_HOST -U $DB_USER -d stockwishlist -c '\q' 2>/dev/null; then
              echo "✅ Connected to DB on attempt $i"
              break
            fi
            echo "⚠️ Attempt $i: DB not ready yet. Retrying in 10s..."
            sleep 10
            if [ "$i" -eq 30 ]; then
              echo "❌ Database never became available after 10 minutes (60 attempts)."
              exit 1
            fi
          done

          echo "🔍 Checking if 'wishlist' table already exists..."
          TABLE_EXISTS=$(psql -h $RDS_HOST -U $DB_USER -d stockwishlist -tAc "SELECT to_regclass('public.wishlist');")

          echo TABLE_EXISTS $TABLE_EXISTS

          if [ $TABLE_EXISTS = "wishlist" ]; then
            echo "✅ Wishlist table already exists. Skipping seed."
          else
            echo "🌱 Seeding database..."
            psql -h $RDS_HOST -U $DB_USER -d stockwishlist -f wishlist.sql
          fi

      - name: 📦 Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      - name: 🛠️ Create .env.production from GitHub Secrets
        working-directory: frontend
        run: |
          echo "VUE_APP_REGION=${{ secrets.COGNITO_REGION }}" > .env.production
          echo "VUE_APP_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}" >> .env.production
          echo "VUE_APP_CLIENT_ID=${{ secrets.COGNITO_APP_CLIENT_ID }}" >> .env.production

      - name: 🏗️ Build Frontend App
        working-directory: frontend
        run: npm run build
