name: Build Backend, Deploy Terraform, Seed DB, Build Frontend

on:
  push:

permissions:
  id-token: write
  contents: read

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env:
      DB_USER: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: 🧾 Checkout Code
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: 🔐 Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - name: 🐳 Verify Docker is Available
        run: docker --version

      - name: 📁 Ensure Lambda Build Directory Exists
        run: mkdir -p modules/lambda/build

      - name: 🐳 Build Lambda Layer with Docker
        working-directory: backend
        run: |
          docker run --rm -v "$PWD":/var/task \
          amazonlinux:2023 \
          bash -c "
            yum install -y python3 python3-pip python3-setuptools zip &&
            cd /var/task &&
            mkdir -p python &&
            pip3 install -r requirements.txt -t python &&
            echo '✅ Installed packages:' &&
            ls python/ &&
            zip -r9 python-deps-layer.zip python
          "
          mkdir -p ../terraform/modules/lambda/build
          mv python-deps-layer.zip ../terraform/modules/lambda/build/

      - name: 🕵️ Verify Lambda Layer Contains psycopg2
        run: unzip -l terraform/modules/lambda/build/python-deps-layer.zip | grep psycopg2

      - name: ✅ Verify Lambda Layer ZIP exists
        run: |
          if [ ! -f terraform/modules/lambda/build/python-deps-layer.zip ]; then
            echo "❌ Lambda layer zip not found!"
            exit 1
          else
            echo "✅ Lambda layer zip exists."
          fi

      - name: 📦 Package Flask Backend Lambda
        run: |
          mkdir -p backend/lambda_package
          cd backend/lambda_package
          zip -r ../../modules/lambda/build/function-code.zip .
          cd ../..

      - name: 📦 Package User Migration Lambda
        run: |
          zip -r modules/lambda/build/user-migration.zip backend/user_migration

      - name: ⚙️ Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: ⚙️ Terraform Init
        working-directory: terraform
        run: terraform init

      - name: 🔧 Generate terraform.tfvars from GitHub Secrets
        working-directory: terraform
        run: |
          cat <<EOF > terraform.tfvars
          use_public_subnet_for_rds = true
          public_subnet_ids = ${PUBLIC_SUBNET_IDS}
          db_username = "${DB_USER}"
          db_password = "${DB_PASSWORD}"
          vpc_id = "${{ secrets.VPC_ID }}"
          github_oauth_token = "${{ secrets.GHUB_OAUTH_TOKEN }}"
          EOF
        env:
          PUBLIC_SUBNET_IDS: ${{ secrets.PUBLIC_SUBNET_IDS }}

      - name: 📋 Terraform Plan and Save Output
        id: tf_plan
        working-directory: terraform
        run: |
          terraform plan -out=tfplan
          terraform show -no-color tfplan > plan.txt
          if grep -q "No changes." plan.txt; then
            echo "NO_CHANGES=true" >> $GITHUB_ENV
          else
            echo "NO_CHANGES=false" >> $GITHUB_ENV
          fi

      - name: 🚀 Terraform Apply (If Changes)
        if: env.NO_CHANGES == 'false'
        working-directory: terraform
        run: terraform apply -auto-approve tfplan

      - name: ⏭️ Skip Terraform Apply (No Changes)
        if: env.NO_CHANGES == 'true'
        run: echo "✅ Skipping apply — no changes detected."

      - name: 🧪 Verify Terraform Binary (Debug)
        run: |
          which terraform
          terraform -version

      - name: 📥 Always Download Latest wishlist.sql
        run: |
          echo "Downloading latest wishlist.sql..."
          curl -L -o backend/seed_db_lambda/wishlist.sql https://raw.githubusercontent.com/RareSonal/StockWishlist/main/database/wishlist.sql

      - name: 📦 Package Seed DB Lambda
        run: |
          cd backend/seed_db_lambda
          zip -r ../../modules/lambda/build/seed-db-lambda.zip seed_db.py wishlist.sql
          cd ../..

      - name: ⏳ Wait for RDS to Become Available
        env:
          AWS_REGION: us-east-1
          DB_IDENTIFIER: stockwishlist-postgres
        run: |
          echo "Waiting for RDS instance '$DB_IDENTIFIER' to become available..."

          for i in {1..30}; do
            STATUS=$(aws rds describe-db-instances \
            --db-instance-identifier "$DB_IDENTIFIER" \
            --region "$AWS_REGION" \
            --query 'DBInstances[0].DBInstanceStatus' \
            --output text)

            echo "Current RDS status: $STATUS"

            if [ "$STATUS" == "available" ]; then
              echo "✅ RDS is available."
              break
            fi

            echo "⏳ RDS not ready yet. Retrying in 10 seconds..."
            sleep 10
          done

          if [ "$STATUS" != "available" ]; then
            echo "❌ RDS did not become available in time."
            exit 1
          fi
            
      
      - name: 🌱 Seed PostgreSQL Database via Lambda and Remove Lambda
        env:
          AWS_REGION: us-east-1
          LAMBDA_FUNCTION_NAME: seed-db-lambda
        run: |
          echo "Invoking seed-db-lambda function to seed the database..."

          aws lambda invoke \
          --function-name "$LAMBDA_FUNCTION_NAME" \
          --region "$AWS_REGION" \
          --payload '{}' \
          response.json

          echo "Lambda raw response:"
          cat response.json

          echo "Lambda message:"
          jq .message response.json || cat response.json

          if grep -q '❌' response.json; then
            echo "❌ Lambda function returned failure response."
            exit 1
          fi

          echo "✅ Lambda executed successfully."

      - name: 📜 Fetch Lambda Logs for Debugging
        run: |
          LOG_GROUP_NAME="/aws/lambda/seed-db-lambda"
          LOG_STREAM=$(aws logs describe-log-streams \
          --log-group-name "$LOG_GROUP_NAME" \
          --order-by LastEventTime \
          --descending \
          --limit 1 \
          --query 'logStreams[0].logStreamName' \
          --output text)

          echo "Fetching logs for stream: $LOG_STREAM"
          aws logs get-log-events \
          --log-group-name "$LOG_GROUP_NAME" \
          --log-stream-name "$LOG_STREAM" \
          --limit 50 \
          --query 'events[*].message' \
          --output text

      - name: 📦 Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      - name: 🛠️ Create .env.production from GitHub Secrets
        working-directory: frontend
        run: |
          echo "VUE_APP_REGION=${{ secrets.COGNITO_REGION }}" > .env.production
          echo "VUE_APP_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}" >> .env.production
          echo "VUE_APP_CLIENT_ID=${{ secrets.COGNITO_APP_CLIENT_ID }}" >> .env.production

      - name: 🏗️ Build Frontend App
        working-directory: frontend
        run: npm run build
