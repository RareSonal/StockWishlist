name: Build Backend, Deploy Terraform, Seed DB, Build Frontend

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env:
      DB_HOST: ${{ secrets.RDS_ENDPOINT }}
      DB_USER: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}

    steps:
      - name: 🧾 Checkout Code
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: 🔐 Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - name: 🐳 Verify Docker is Available
        run: docker --version

      - name: 📁 Ensure Lambda Build Directory Exists
        run: mkdir -p modules/lambda/build

      - name: 🧹 Clean Lambda build directory
        run: rm -rf terraform/modules/lambda/build/*

      - name: 🐳 Build Lambda Layer with Docker
        working-directory: backend
        run: |
         rm -f ../terraform/modules/lambda/build/python-deps-layer.zip
         docker run --rm -v "$PWD":/var/task \
           amazonlinux:2023 \
           bash -c "
             yum install -y python3.12 python3.12-pip python3.12-devel gcc postgresql-devel zip &&
             alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1 &&
             alternatives --install /usr/bin/pip3 pip3 /usr/bin/pip3.12 1 &&
             cd /var/task &&
             mkdir -p python &&
             pip3 install -r requirements.txt -t python &&
             echo '✅ Installed packages:' &&
             ls python/ &&
             zip -r9 python-deps-layer.zip python
           "
          mkdir -p ../terraform/modules/lambda/build
          mv python-deps-layer.zip ../terraform/modules/lambda/build/

      - name: 🕵️ Verify Lambda Layer Contains psycopg2
        run: unzip -l terraform/modules/lambda/build/python-deps-layer.zip | grep psycopg2

      - name: ✅ Verify Lambda Layer ZIP exists
        run: |
          if [ ! -f terraform/modules/lambda/build/python-deps-layer.zip ]; then
            echo "❌ Lambda layer zip not found!"
            exit 1
          else
            echo "✅ Lambda layer zip exists."
          fi

      - name: 📥 Download latest wishlist.sql (always overwrite)
        run: |
          echo "🔄 Downloading latest wishlist.sql..."
          curl -L -o backend/seed_db_lambda/wishlist.sql https://raw.githubusercontent.com/RareSonal/StockWishlist/main/database/wishlist.sql

      - name: 📦 Package Seed DB Lambda (Include wishlist.sql)
        run: |
          cd backend/seed_db_lambda
          zip -r ../../modules/lambda/build/seed-db-lambda.zip seed_db.py wishlist.sql
          cd ../..

      - name: 📦 Package Flask Backend Lambda
        run: |
          mkdir -p backend/lambda_package
          cd backend/lambda_package
          zip -r ../../modules/lambda/build/function-code.zip .
          cd ../..

      - name: 📦 Package User Migration Lambda
        run: |
          zip -r modules/lambda/build/user-migration.zip backend/user_migration

      - name: ⚙️ Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: ⚙️ Terraform Init
        working-directory: terraform
        run: terraform init

      - name: 🔧 Generate terraform.tfvars from GitHub Secrets
        working-directory: terraform
        run: |
          cat <<EOF > terraform.tfvars
          use_public_subnet_for_rds = false
          public_subnet_ids = ${PUBLIC_SUBNET_IDS}
          db_username = "${DB_USER}"
          db_password = "${DB_PASSWORD}"
          vpc_id = "${{ secrets.VPC_ID }}"
          github_oauth_token = "${{ secrets.GHUB_OAUTH_TOKEN }}"
          EOF
        env:
          PUBLIC_SUBNET_IDS: ${{ secrets.PUBLIC_SUBNET_IDS }}

      - name: 🔄 Terraform Refresh
        working-directory: terraform
        run: terraform refresh

      - name: 🐞 Terraform State List (Debug)
        working-directory: terraform
        run: terraform state list

      - name: 📋 Terraform Plan and Save Output
        id: tf_plan
        working-directory: terraform
        run: |
          terraform plan -out=tfplan
          terraform show -no-color tfplan > plan.txt
          if grep -q "No changes." plan.txt; then
            echo "NO_CHANGES=true" >> $GITHUB_ENV
          else
            echo "NO_CHANGES=false" >> $GITHUB_ENV
          fi

      - name: 🚀 Terraform Apply (If Changes)
        if: env.NO_CHANGES == 'false'
        working-directory: terraform
        run: terraform apply -auto-approve tfplan

      - name: ⏭️ Skip Terraform Apply (No Changes)
        if: env.NO_CHANGES == 'true'
        run: echo "✅ Skipping apply — no changes detected."

      - name: 🧪 Verify Terraform Binary (Debug)
        run: |
          which terraform
          terraform -version

      - name: ⏳ Wait for RDS to Become Available
        env:
          AWS_REGION: us-east-1
          DB_IDENTIFIER: stockwishlist-postgres
        run: |
          echo "Waiting for RDS instance '$DB_IDENTIFIER' to become available..."

          for i in {1..30}; do
            STATUS=$(aws rds describe-db-instances \
            --db-instance-identifier "$DB_IDENTIFIER" \
            --region "$AWS_REGION" \
            --query 'DBInstances[0].DBInstanceStatus' \
            --output text)

            echo "Current RDS status: $STATUS"

            if [ "$STATUS" == "available" ]; then
              echo "✅ RDS is available."
              break
            fi

            echo "⏳ RDS not ready yet. Retrying in 10 seconds..."
            sleep 10
          done

          if [ "$STATUS" != "available" ]; then
            echo "❌ RDS did not become available in time."
            exit 1
          fi

      - name: 🌱 Seed PostgreSQL Database via Lambda and Remove Lambda
        env:
          AWS_REGION: us-east-1
          LAMBDA_FUNCTION_NAME: seed-db-lambda
        run: |
          echo '{"action":"seed"}' > payload.json

          echo "Invoking seed-db-lambda function to seed the database..."

          aws lambda invoke \
          --function-name "$LAMBDA_FUNCTION_NAME" \
          --region "$AWS_REGION" \
          --payload fileb://payload.json \
          response.json

          echo "Lambda raw response:"
          cat response.json

          echo "Lambda message:"
          jq .message response.json || cat response.json

          if grep -q '❌' response.json; then
            echo "❌ Lambda function returned failure response."
            exit 1
          fi

          echo "✅ Lambda executed successfully."

      - name: 🧪 Test User Migration Lambda (Dry Run)
        env:
          AWS_REGION: us-east-1
          LAMBDA_FUNCTION_NAME: user-migration-lambda
        run: |
          echo '{
            "version": "1",
            "triggerSource": "UserMigration_Authentication",
            "userName": "zoe.carter6565@example.com",
            "userPoolId": "${{ secrets.COGNITO_USER_POOL_ID }}",
            "request": {
              "password": "CC777$YCC77",
              "validationData": {}
            },
            "response": {}
          }' > user_migration_payload.json

          echo "📨 Invoking user-migration Lambda with dry-run payload..."

          aws lambda invoke \
            --function-name "$LAMBDA_FUNCTION_NAME" \
            --region "$AWS_REGION" \
            --payload fileb://user_migration_payload.json \
            migration_response.json || true

          echo "📄 Lambda response:"
          cat migration_response.json

      - name: 🕵️ Verify Database Tables and Sample Data via Lambda
        env:
          AWS_REGION: us-east-1
          LAMBDA_FUNCTION_NAME: seed-db-lambda
        run: |
          echo '{"action":"verify"}' > verify_payload.json

          echo "Invoking seed-db-lambda with verify action to fetch table info and sample data..."

          aws lambda invoke \
          --function-name "$LAMBDA_FUNCTION_NAME" \
          --region "$AWS_REGION" \
          --payload fileb://verify_payload.json \
          verify_response.json

          echo "Raw verify response:"
          cat verify_response.json

          echo "Parsed results:"
          cat verify_response.json | jq '.message, .tables, .sample_data'

          if cat verify_response.json | jq -e '.message | test("❌")' > /dev/null; then
            echo "❌ Verification failed."
            exit 1
          fi

      - name: 📦 Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      - name: 🛠️ Create .env.production from GitHub Secrets
        working-directory: frontend
        run: |
          echo "VUE_APP_REGION=${{ secrets.COGNITO_REGION }}" > .env.production
          echo "VUE_APP_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}" >> .env.production
          echo "VUE_APP_CLIENT_ID=${{ secrets.COGNITO_APP_CLIENT_ID }}" >> .env.production

      - name: 🏗️ Build Frontend App
        working-directory: frontend
        run: npm run build
